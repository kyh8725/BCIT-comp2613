/**
 * Project: Assignment2
 * File: UiController.java
 * Date: Jun 29, 2017
 * Time: 10:23:57 PM
 */

package a00904649.ui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.time.Duration;
import java.time.Instant;

import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import a00904649.Bcmc;
import a00904649.data.Inventory;
import a00904649.database.Database;
import a00904649.database.dao.InventoryDao;

/**
 * @author Yoonho(Daniel) Kim A00904649
 *
 */
public class UiController {
	private static final Logger LOG = LogManager.getLogger();
	private static MainFrame mainFrame;
	private static InventoryListDialog dialog;
	private static InventoryDao inventoryDao;

	protected UiController(MainFrame mainFrame) {
		UiController.mainFrame = mainFrame;
		inventoryDao = InventoryDao.getTheinstance();
	}

	/**
	 * @param inventoryListDialog
	 */
	public UiController(InventoryListDialog dialog) {
		UiController.dialog = dialog;
		inventoryDao = InventoryDao.getTheinstance();
	}

	public static void handle(Exception e) {
		LOG.error(e.getMessage());
		e.printStackTrace();
	}

	protected static class ExitMenuItemHandler implements ActionListener {

		/*
		 * (non-Javadoc)
		 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
		 */
		@Override
		public void actionPerformed(ActionEvent e) {
			LOG.debug("Exit menu item pressed.");
			Instant endTime = Instant.now();
			LOG.info("End: " + endTime);
			LOG.info(String.format("Duration: %d ms", Duration.between(Bcmc.startTime, endTime).toMillis()));
			System.exit(0);
		}
	}

	protected static class AboutMenuItemHandler implements ActionListener {

		/*
		 * (non-Javadoc)
		 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
		 */
		@Override
		public void actionPerformed(ActionEvent event) {
			LOG.debug("About menu item pressed.");
			JOptionPane.showMessageDialog(UiController.mainFrame, "Assignment 2\nBy Daniel Kim A00904649", "About Bcmc",
					JOptionPane.INFORMATION_MESSAGE);
		}
	}

	protected static class CustomerItemHandler implements ActionListener {

		/*
		 * (non-Javadoc)
		 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
		 */
		@Override
		public void actionPerformed(ActionEvent event) {
			LOG.debug("Customer menu item pressed.");
			JOptionPane.showMessageDialog(UiController.mainFrame, "This feature is not available yet", "Customer", JOptionPane.INFORMATION_MESSAGE);
		}
	}

	protected static class ServiceItemHandler implements ActionListener {

		/*
		 * (non-Javadoc)
		 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
		 */
		@Override
		public void actionPerformed(ActionEvent event) {
			LOG.debug("Service menu item pressed.");
			JOptionPane.showMessageDialog(UiController.mainFrame, "This feature is not available yet", "Service", JOptionPane.INFORMATION_MESSAGE);
		}
	}

	protected static class InventoryListSelectionHandler implements ListSelectionListener {
		private JList<InventoryListItem> inventoryList;
		private InventoryListModel inventoryModel;

		/**
		 * @param customersList
		 */
		public InventoryListSelectionHandler(JList<InventoryListItem> inventoryList) {
			this.inventoryList = inventoryList;
			// sorry about the cast!
			inventoryModel = (InventoryListModel) inventoryList.getModel();
		}

		/*
		 * (non-Javadoc)
		 * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)
		 */
		@Override
		public void valueChanged(ListSelectionEvent event) {
			if (event.getValueIsAdjusting()) {
				return;
			}

			InventoryListItem inventory = inventoryList.getSelectedValue();
			if (inventory != null) {
				LOG.debug("InventoryForSqlServer selected: " + inventoryList.getSelectedIndex());
				updateInventory(inventory, inventoryList.getSelectedIndex());
			}
		}

		protected void updateInventory(InventoryListItem item, int index) {
			try {
				InventoryDialog dialog = new InventoryDialog(mainFrame, item.getInventory());
				dialog.setVisible(true);
				Inventory inventory = dialog.getInventory();
				if (inventory != null) {
					LOG.debug("Updating InventoryForSqlServer: " + inventory.getId());
					inventoryDao.update(inventory);
					item.setInventory(inventory);
					inventoryModel.update(index, item);
				}

				inventoryList.clearSelection();
			} catch (Exception e) {
				UiController.handle(e);
			}
		}
	}

	protected static class MainFrameWindowEevntHandler extends WindowAdapter {

		/**
		 * Invoked when a window is in the process of being closed.
		 * The close operation can be overridden at this point.
		 */
		@Override
		public void windowClosing(WindowEvent e) {
			Database.getTheInstance().shutdown();
		}
	}

}
